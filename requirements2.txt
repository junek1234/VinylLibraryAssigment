[done] The application must use Sockets connecting client and server, with the server being multithreaded
[done] The client must at least be able to:
[done] Get a list of all Vinyls
[done] Reserve, borrow, and return a Vinyl
[done] Receive messages broadcasted (multicasted) when a Vinyl changes lending state, and when a Vinyl has been removed (e.g. by the server)
[] (Optional) All messages between client and server must be in JSON format, error messages from server included.
[] You must make a class diagram for the full solution (in Astah).
  In the diagram you must be able to identify the MVVM, the Observer pattern and the design of the socket related classes
[done] You must use Java Sockets to connect the Client and Server
[done] You must use the MVVM Design Pattern with at least two views, (maybe you already did this in Assignment 1. If not, you must do it now).
[done] You must use the Observer Design Pattern .
[done] You must use the Singleton (and/or Multiton) Design Pattern as a log to the server console and to file(s).
  It should always be possible to find all the communication for an entire day –text, IP address, date and time.
[] !IMPORTANT! test this /\ with different devices
[done] You must use the Strategy Design Pattern
[] You must create a UML Class Diagram for the final solution (preferably in Astah).
[] Documentation of your protocol (messages, syntax and actions).
[] Annotated printout from Wireshark that show the following information:
   The segments exchanged in the 3-way handshake. How are they identified?
   IP addresses and port numbers associated with the TCP socket established between your client and server. The client and server must run on different hosts (NOT localhost).
   Application layer “borrow” request message from client and response message from server.
[] !important! Fix some exceptions where no try-catch block is used